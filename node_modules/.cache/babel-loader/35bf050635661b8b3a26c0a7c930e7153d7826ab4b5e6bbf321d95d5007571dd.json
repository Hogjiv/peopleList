{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"p\", null, \"Count: \" + _toDisplayString($options.count), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.increment && $options.increment(...args))\n  }, \"Increment\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.decrement && $options.decrement(...args))\n  }, \"Decrement\")]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_toDisplayString","$options","count","onClick","_cache","args","increment","decrement"],"sources":["D:\\Ira\\Program\\list\\src\\components\\newComp.vue"],"sourcesContent":["<script>\r\nexport default {\r\n  computed: {\r\n    count() {\r\n      return this.$store.getters.getCount;\r\n    }\r\n  },\r\n  methods: {\r\n    increment() {\r\n      this.$store.dispatch(\"increment\");\r\n    },\r\n    decrement() {\r\n      this.$store.dispatch(\"decrement\");\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <p>Count: {{ count }}</p>\r\n    <button @click=\"increment\">Increment</button>\r\n    <button @click=\"decrement\">Decrement</button>\r\n  </div>\r\n</template>\r\n\r\n"],"mappings":";;uBAmBEA,mBAAA,CAIM,cAHJC,mBAAA,CAAyB,WAAtB,SAAO,GAAAC,gBAAA,CAAGC,QAAA,CAAAC,KAAK,kBAClBH,mBAAA,CAA6C;IAApCI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,QAAA,CAAAK,SAAA,IAAAL,QAAA,CAAAK,SAAA,IAAAD,IAAA,CAAS;KAAE,WAAS,GACpCN,mBAAA,CAA6C;IAApCI,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEJ,QAAA,CAAAM,SAAA,IAAAN,QAAA,CAAAM,SAAA,IAAAF,IAAA,CAAS;KAAE,WAAS,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}