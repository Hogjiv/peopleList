{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_viewList = _resolveComponent(\"viewList\");\n  const _component_createList = _resolveComponent(\"createList\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_viewList, {\n    users: $data.users,\n    peopleList: $data.peopleList,\n    onUpdatePerson: $options.editNoteClick,\n    onDeleteNote: $options.deleteNoteClick\n  }, null, 8 /* PROPS */, [\"users\", \"peopleList\", \"onUpdatePerson\", \"onDeleteNote\"]), _createCommentVNode(\" отображаем компонент   c польхователями, полученными  их json файлй. Подписываемся на события удаления и обновления данных. Получаем через props значения users, peopleList \"), _createVNode(_component_createList, {\n    onAddNewUser: $options.addNewUser\n  }, null, 8 /* PROPS */, [\"onAddNewUser\"]), _createCommentVNode(\" отображаем компонент  добавления нового пользователя \")]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_viewList","users","$data","peopleList","onUpdatePerson","$options","editNoteClick","onDeleteNote","deleteNoteClick","_createCommentVNode","_component_createList","onAddNewUser","addNewUser"],"sources":["D:\\Ira\\Program\\list\\src\\App.vue"],"sourcesContent":["<script>\nimport viewList from './components/viewList.vue';\nimport createList from './components/createList.vue';\nimport list from '../list';\n\nexport default {\n  name: 'App',\n  components: {\n    viewList,\n    createList\n  },\n  data() {\n    return {\n      users: [],\n      peopleList: list.people // Передача данных из list.json в viewList\n    };\n  },\n  mounted() {\n    this.$store.dispatch(\"loadUsersFromList\"); // загружаем пользоватлей из листа\n},\nmethods: {\n  addNewUser(payload) { \n    this.users.push(payload); \n  }, // передаем событие о добавлении нового пользователя в store  \n  editNoteClick(id) {\n    this.$store.dispatch('editNote', id);\n  }, // передаем событие о редактировании в store\n  deleteNoteClick(item) {\n   const index = this.peopleList.findIndex((person) => person.id === item.id);\n   if (index !== -1) {\n     this.peopleList.splice(index, 1); // Удаляем существующую запись\n   } else {\n     const newUserIndex = this.users.findIndex((user) => user.id === item.id);\n    if (newUserIndex !== -1) {\n       this.users.splice(newUserIndex, 1); // Удаляем новую запись\n     }\n   }\n // this.$store.dispatch(\"deleteNote\", item); // тут должна быть передача об удалении в store\n},\n},\n};\n</script>\n\n<template>\n  <div>\n    <viewList :users=\"users\" :peopleList=\"peopleList\" \n    @updatePerson=\"editNoteClick\" \n    @deleteNote=\"deleteNoteClick\" /> <!-- отображаем компонент   c польхователями, полученными  их json файлй. Подписываемся на события удаления и обновления данных. Получаем через props значения users, peopleList -->\n    <createList @addNewUser=\"addNewUser\" />   <!-- отображаем компонент  добавления нового пользователя -->\n  </div>\n</template>\n\n\n"],"mappings":";;;;uBA4CEA,mBAAA,CAKM,cAJJC,YAAA,CAEgCC,mBAAA;IAFrBC,KAAK,EAAEC,KAAA,CAAAD,KAAK;IAAGE,UAAU,EAAED,KAAA,CAAAC,UAAU;IAC/CC,cAAY,EAAEC,QAAA,CAAAC,aAAa;IAC3BC,YAAU,EAAEF,QAAA,CAAAG;sFAAoBC,mBAAA,iLAAoL,EACrNV,YAAA,CAAuCW,qBAAA;IAA1BC,YAAU,EAAEN,QAAA,CAAAO;EAAU,2CAAOH,mBAAA,0DAA6D,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}